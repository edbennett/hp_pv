import numpy as np

plot_styles = "styles/paperdraft.mplstyle"

lattice_sizes = [24, 28, 32, 36, 40]
beta_slugs = ["920", "940", "960", "980", "100", "102", "104", "108", "110", "114", "120", "128", "136", "146"]
operators = ["plaq", "sym"]

interpolate_fit_order = 4


rule all:
    input:
        volume_extrapolations=expand(
            "assets/plots/volume_extrapolation_{operator}.pdf",
            operator=operators,
        ),
        beta_interpolations=expand(
            "assets/plots/beta_interpolation_finite_a_{operator}.pdf",
            operator=operators,
        ),
        continuum_extrapolation="assets/plots/continuum_extrapolation.pdf",
        continuum_betafunction="assets/plots/continuum_betafunction.pdf",
        continuum_betafunction_svg="assets/plots/continuum_betafunction.svg",
        fixed_point_scan="assets/plots/fixed_point_scan.pdf",


rule extrapolate_infinite_volume:
    input:
        data=expand("data/l{NX}t{NX}b{{beta_slug}}.txt", NX=lattice_sizes),
        script="src/extrapolate_infinite_volume.py",
    output:
        "intermediary_data/infinite_volume/b{beta_slug}_t{time}_{operator}.json.gz",
    conda:
        "envs/hp.yml"
    shell:
        "python {input.script} {input.data} --output_filename {output} --operator {wildcards.operator} --time {wildcards.time}"


volume_plot_beta_slugs = ["960", "980", "102"]
volume_plot_times = [2.5, 3.5, 4.5, 6.0]

rule plot_volume_extrapolation:
    input:
        data=expand(
            "intermediary_data/infinite_volume/b{beta_slug}_t{time}_{{operator}}.json.gz",
            beta_slug=volume_plot_beta_slugs,
            time=volume_plot_times,
        ),
        script="src/plot_infinite_volume_extrapolation.py",
    output:
        "assets/plots/volume_extrapolation_{operator}.pdf",
    conda:
        "envs/hp.yml"
    shell:
        "python {input.script} {input.data} --output_filename {output} --plot_styles {plot_styles}"


rule interpolate_finite_a:
    input:
        data=expand(
            "intermediary_data/infinite_volume/b{beta_slug}_t{{time}}_{{operator}}.json.gz",
            beta_slug=beta_slugs,
        ),
        script="src/fit_beta_against_g2.py",
    output:
        "intermediary_data/beta_interpolation/t{time}_{operator}.json.gz",
    conda:
        "envs/hp.yml"
    shell:
        "python {input.script} {input.data} --order {interpolate_fit_order} --output_filename {output}"


finite_a_plot_times = volume_plot_times

rule plot_finite_a_interpolation:
    input:
        data=expand(
            "intermediary_data/beta_interpolation/t{time}_{{operator}}.json.gz",
            time=finite_a_plot_times,
        ),
        script="src/plot_beta_against_g2.py",
    output:
        "assets/plots/beta_interpolation_finite_a_{operator}.pdf",
    conda:
        "envs/hp.yml"
    shell:
        "python {input.script} {input.data} --plot_styles {plot_styles} --plot_filename {output}"


def continuum_extrapolation_sources(wildcards):
    return [
        f"intermediary_data/beta_interpolation/t{time:.02f}_{{operator}}.json.gz"
        for time in np.arange(float(wildcards.tmin), float(wildcards.tmax) + 0.01, float(wildcards.dt))
    ]


rule extrapolate_continuum:
    input:
        data=continuum_extrapolation_sources,
        script="src/extrapolate_continuum.py",
    output:
        "intermediary_data/continuum_extrapolation/{operator}_gsquared{g_squared}_tmin{tmin}_tmax{tmax}_dt{dt}.json.gz",
    conda:
        "envs/hp.yml"
    shell:
        "python {input.script} {input.data} --g_squared {wildcards.g_squared} --output_filename {output}"


continuum_extrapolation_plot_g_squareds = [2.0, 4.0, 6.0, 8.0]
continuum_extrapolation_plot_tick_times = [2, 2.5, 3.5, 4.5, 6]

rule plot_continuum_extrapolation:
    input:
        fit_data=expand(
            "intermediary_data/continuum_extrapolation/{operator}_gsquared{g_squared}_tmin3.5_tmax6.0_dt0.2.json.gz",
            operator=operators,
            g_squared=continuum_extrapolation_plot_g_squareds,
        ),
        unfit_data=expand(
            "intermediary_data/continuum_extrapolation/{operator}_gsquared{g_squared}_tmin2.5_tmax6.8_dt0.2.json.gz",
            operator=operators,
            g_squared=continuum_extrapolation_plot_g_squareds,
        ),
        script="src/plot_continuum_extrapolation.py",
    output:
        "assets/plots/continuum_extrapolation.pdf",
    conda:
        "envs/hp.yml"
    shell:
        "python {input.script} {input.fit_data} --unfit_filenames {input.unfit_data} --tick_times {continuum_extrapolation_plot_tick_times} --output_file {output} --plot_styles {plot_styles}"


continuum_plot_g_squareds = np.linspace(1.8, 10.4, 87)

rule plot_continuum_beta:
    input:
        data=expand(
            "intermediary_data/continuum_extrapolation/{operator}_gsquared{g_squared}_tmin3.5_tmax6.0.json.gz",
            operator=operators,
            g_squared=continuum_plot_g_squareds,
        ),
        script="src/plot_beta_against_g2_continuum.py",
    output:
        "assets/plots/continuum_betafunction.{extension}",
    conda:
        "envs/hp.yml"
    shell:
        "python {input.script} {input.data} --plot_filename {output} --plot_styles {plot_styles}"


fixed_point_g_squareds = np.linspace(4.5, 8.5, 41)


rule fit_fixed_point:
    input:
        data=expand(
            "intermediary_data/continuum_extrapolation/{{operator}}_gsquared{g_squared}_tmin{{tmin}}_tmax{{tmax}}_dt{{dt}}.json.gz",
            g_squared=fixed_point_g_squareds,
        ),
        script="src/fit_fixed_point.py",
    output:
        "intermediary_data/fixed_point/{operator}_tmin{tmin}_tmax{tmax}_dt{dt}.json.gz",
    conda:
        "envs/hp.yml"
    shell:
        "python {input.script} {input.data} --output_filename {output}"


rule plot_fixed_point_scan:
    input:
        data=expand(
            "intermediary_data/fixed_point/{operator}_tmin{tmin}_tmax{tmax}_dt0.1.json.gz",
            operator=operators,
            tmin=[3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4.0],
            tmax=[5.0, 5.5, 6.0],
        ),
        script="src/plot_fixed_point_scan.py",
    output:
        "assets/plots/fixed_point_scan.{extension}",
    conda:
        "envs/hp.yml"
    shell:
        "python {input.script} {input.data} --plot_filename {output} --plot_styles {plot_styles}"
